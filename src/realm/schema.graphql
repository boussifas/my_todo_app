type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Mutation {
  deleteManyProjects(query: ProjectQueryInput): DeleteManyPayload
  deleteManyTasks(query: TaskQueryInput): DeleteManyPayload
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteOneProject(query: ProjectQueryInput!): Project
  deleteOneTask(query: TaskQueryInput!): Task
  deleteOneUser(query: UserQueryInput!): User
  insertManyProjects(data: [ProjectInsertInput!]!): InsertManyPayload
  insertManyTasks(data: [TaskInsertInput!]!): InsertManyPayload
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertOneProject(data: ProjectInsertInput!): Project
  insertOneTask(data: TaskInsertInput!): Task
  insertOneUser(data: UserInsertInput!): User
  replaceOneProject(query: ProjectQueryInput, data: ProjectInsertInput!): Project
  replaceOneTask(query: TaskQueryInput, data: TaskInsertInput!): Task
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  updateManyProjects(query: ProjectQueryInput, set: ProjectUpdateInput!): UpdateManyPayload
  updateManyTasks(set: TaskUpdateInput!, query: TaskQueryInput): UpdateManyPayload
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateOneProject(query: ProjectQueryInput, set: ProjectUpdateInput!): Project
  updateOneTask(query: TaskQueryInput, set: TaskUpdateInput!): Task
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  upsertOneProject(query: ProjectQueryInput, data: ProjectInsertInput!): Project
  upsertOneTask(query: TaskQueryInput, data: TaskInsertInput!): Task
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
}

scalar ObjectId

type Project {
  _id: ObjectId!
  _partition: String!
  name: String!
}

input ProjectInsertInput {
  _id: ObjectId
  _partition: String!
  name: String!
}

input ProjectQueryInput {
  _partition_exists: Boolean
  _id_ne: ObjectId
  _partition_lte: String
  _id_exists: Boolean
  _id_gt: ObjectId
  name_in: [String]
  name_lt: String
  _partition_in: [String]
  name_lte: String
  _id_in: [ObjectId]
  name: String
  name_gte: String
  OR: [ProjectQueryInput!]
  _partition_ne: String
  _id_gte: ObjectId
  _id: ObjectId
  _id_lt: ObjectId
  _partition_gt: String
  _partition_lt: String
  name_ne: String
  _partition: String
  _id_lte: ObjectId
  name_exists: Boolean
  AND: [ProjectQueryInput!]
  _partition_nin: [String]
  _partition_gte: String
  name_nin: [String]
  _id_nin: [ObjectId]
  name_gt: String
}

enum ProjectSortByInput {
  _ID_ASC
  _ID_DESC
  _PARTITION_ASC
  _PARTITION_DESC
  NAME_ASC
  NAME_DESC
}

input ProjectUpdateInput {
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  _partition: String
  _partition_unset: Boolean
  name: String
}

type Query {
  project(query: ProjectQueryInput): Project
  projects(query: ProjectQueryInput, limit: Int = 100, sortBy: ProjectSortByInput): [Project]!
  task(query: TaskQueryInput): Task
  tasks(query: TaskQueryInput, limit: Int = 100, sortBy: TaskSortByInput): [Task]!
  user(query: UserQueryInput): User
  users(limit: Int = 100, sortBy: UserSortByInput, query: UserQueryInput): [User]!
}

type Task {
  _id: ObjectId!
  _partition: String!
  assignee: User
  name: String!
  status: String!
}

input TaskAssigneeRelationInput {
  create: UserInsertInput
  link: String
}

input TaskInsertInput {
  assignee: TaskAssigneeRelationInput
  name: String!
  status: String!
  _id: ObjectId
  _partition: String!
}

input TaskQueryInput {
  _partition: String
  status_lte: String
  name_exists: Boolean
  OR: [TaskQueryInput!]
  status_ne: String
  _id_exists: Boolean
  _partition_gte: String
  name_lte: String
  name_ne: String
  _id_gte: ObjectId
  _id_in: [ObjectId]
  _partition_lte: String
  assignee_exists: Boolean
  status_gt: String
  name_nin: [String]
  name_in: [String]
  status_nin: [String]
  status_lt: String
  _id_nin: [ObjectId]
  name: String
  _id_gt: ObjectId
  _partition_ne: String
  status: String
  _partition_nin: [String]
  _id_ne: ObjectId
  status_gte: String
  status_exists: Boolean
  name_lt: String
  _partition_lt: String
  _partition_in: [String]
  _partition_exists: Boolean
  name_gt: String
  name_gte: String
  _id: ObjectId
  _partition_gt: String
  assignee: UserQueryInput
  _id_lt: ObjectId
  status_in: [String]
  AND: [TaskQueryInput!]
  _id_lte: ObjectId
}

enum TaskSortByInput {
  _PARTITION_DESC
  ASSIGNEE_DESC
  NAME_ASC
  STATUS_ASC
  _ID_ASC
  _ID_DESC
  NAME_DESC
  STATUS_DESC
  _PARTITION_ASC
  ASSIGNEE_ASC
}

input TaskUpdateInput {
  _id: ObjectId
  status: String
  name_unset: Boolean
  status_unset: Boolean
  _id_unset: Boolean
  _partition_unset: Boolean
  assignee_unset: Boolean
  _partition: String
  assignee: TaskAssigneeRelationInput
  name: String
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  _id: ObjectId!
  _partition: String!
  image: String
  name: String!
  user_id: String!
}

input UserInsertInput {
  name: String!
  image: String
  _id: ObjectId
  _partition: String!
  user_id: String!
}

input UserQueryInput {
  _id_ne: ObjectId
  image_exists: Boolean
  _id: ObjectId
  image_lte: String
  name_lte: String
  _partition_in: [String]
  _id_gt: ObjectId
  _partition_lt: String
  user_id_exists: Boolean
  image: String
  _partition_gte: String
  image_gt: String
  name_exists: Boolean
  _partition_exists: Boolean
  user_id_nin: [String]
  image_lt: String
  _id_lte: ObjectId
  user_id_ne: String
  OR: [UserQueryInput!]
  _partition_lte: String
  user_id_lte: String
  _id_in: [ObjectId]
  user_id_gte: String
  image_gte: String
  image_in: [String]
  user_id: String
  name_lt: String
  image_nin: [String]
  user_id_gt: String
  name_in: [String]
  AND: [UserQueryInput!]
  user_id_lt: String
  name_ne: String
  name_gte: String
  name_nin: [String]
  _partition: String
  _id_exists: Boolean
  _id_nin: [ObjectId]
  name_gt: String
  _partition_gt: String
  _id_lt: ObjectId
  user_id_in: [String]
  image_ne: String
  name: String
  _id_gte: ObjectId
  _partition_nin: [String]
  _partition_ne: String
}

enum UserSortByInput {
  _ID_DESC
  _PARTITION_DESC
  USER_ID_ASC
  NAME_DESC
  IMAGE_ASC
  _ID_ASC
  USER_ID_DESC
  NAME_ASC
  IMAGE_DESC
  _PARTITION_ASC
}

input UserUpdateInput {
  _partition_unset: Boolean
  image_unset: Boolean
  user_id_unset: Boolean
  image: String
  _id: ObjectId
  _partition: String
  _id_unset: Boolean
  name: String
  user_id: String
  name_unset: Boolean
}
